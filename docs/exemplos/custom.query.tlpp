#include 'totvs.ch'
#INCLUDE "FWMVCDEF.CH"
#INCLUDE "TRYEXCEPTION.CH"

namespace custom.query

/*/{Protheus.doc} QUERY
Montagem da Query
@author Wagner Mobile Costa
@since 21/04/2025
@version 1.00

@type function
/*/

class TCForm
	Public Method New()
	Public Method AddForm(cAlias, cFieldMark, lOptional)
	Public Method MontaForm(cRotina, cTitulo, __bMenuDef, __bLegendDef)
	Method CreateBrowse(oOwner, aSX3, aIndTrb, cAlias, cJoin, cFilter, cFieldMark)

	public  data aJoin    as Array
	public  data aFolder  as Array

	data aForm    as Array
	data __ROTINA as Character
	data aStatic  as Array
	data cMarca   as Character
	data bMenuDef 
	data bLegendDef
	data cTitulo  As Character
endclass

Method New() Class TCForm
	::aForm      := {}
	::aJoin      := {}
	::aFolder    := {}
	::__ROTINA   := ""
	::aStatic    := {}
	::cMarca     := ""
	::bMenuDef   := Nil
return self

Method AddForm(cAlias, cFieldMark, lOptional) Class TCForm

Local aSX3    := {}
Local aIndTrb := {}
Local cUsado  := Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(160)
Local cOrdem  := "00"
Local cX3_INIBRW  := ""
Local cX3_RELACAO := ""
Local cX3_CONTEXT := ""
Local aFields	  := FWSX3Util():GetAllFields( cAlias,.T. )
Local nFields	  := 1

DEFAULT cFieldMark := ""
DEFAULT lOptional  := .F.

#DEFINE P_X3_CONTEXT		15

For nFields := 1 To Len(aFields)
	cCampo := Alltrim(aFields[nFields])
	
	cX3_INIBRW  := AllTrim(StrTran(GetSx3Cache(cCampo,"X3_INIBRW"), cAlias + "->", cAlias + "IMP->"))
	cX3_RELACAO := AllTrim(StrTran(GetSx3Cache(cCampo,"X3_RELACAO"), cAlias + "->", cAlias + "IMP->"))
	cX3_CONTEXT := Alltrim(GetSx3Cache(cCampo,"X3_CONTEXT"))
	cOrdem := GetSx3Cache(cCampo,"X3_ORDEM")
	Aadd(aSX3, { 	cCampo,;
					GetSx3Cache(cCampo,"X3_TIPO"),;
					GetSx3Cache(cCampo,"X3_TAMANHO"),;
					GetSx3Cache(cCampo,"X3_DECIMAL"),;
					cOrdem,;
					Alltrim(GetSx3Cache(cCampo,"X3_TITULO")),;
					Alltrim(GetSx3Cache(cCampo,"X3_PICTURE")),;
					GetSx3Cache(cCampo,"X3_CBOX"),;
					GetSx3Cache(cCampo,"X3_NIVEL"),;
					GetSx3Cache(cCampo,"X3_BROWSE"),;
					cUsado,;
					GetSx3Cache(cCampo,"X3_F3"),;
					cX3_INIBRW,;
					cX3_RELACAO,;
					cX3_CONTEXT } )
Next

SIX->(DbSetOrder(1))
SIX->(DbSeek(cAlias))
While SIX->(FieldGet(FieldPos("INDICE"))) == cAlias .And. ! SIX->(Eof())
	Aadd(aIndTrb,{ 	SIX->(FieldGet(FieldPos("ORDEM"))), Alltrim(SIX->(FieldGet(FieldPos("CHAVE")))),;
					Capital(SIX->(FieldGet(FieldPos("DESCRICAO")))),;
					CriaTrab(Nil,.F.) + SIX->(FieldGet(FieldPos("ORDEM"))), "N"})
	SIX->(DbSkip())
EndDo

#DEFINE P_FIELD_MARK	6
#DEFINE P_REG_LOAD		7
#DEFINE P_OPTIONAL		8

Aadd(::aForm, { cAlias, aSX3, aIndTrb, Nil, Nil, cFieldMark, {}, lOptional })

Return

/*/{Protheus.doc} MontaForm
Montagem do formulá¡rio para grid
@author Wagner Mobile Costa
@since 21/04/2025
@version 1.00

@type function
/*/

Method MontaForm(cRotina, cTitulo, __bMenuDef, __bLegendDef) Class TCForm

Local oFWLayer  := FWLayer():New() 
Local oPnlCapa, oDlg
Local nPos      := 1
Local aSize     := MsAdvSize()

Private aQuery  := {}

	::__ROTINA := cRotina
	::cTitulo  := cTitulo
	::bMenuDef := __bMenuDef
	::bLegendDef := __bLegendDef

	__PQ1_ID  := ""

	DEFINE MSDIALOG oDlg TITLE ::cTitulo FROM aSize[7],00 TO aSize[6],aSize[5] OF oMainWnd PIXEL

	oFWLayer:Init(oDlg,.F.)

	oFWLayer:AddLine( 'UP', If(Len(::aFolder) > 0, 45, 100), .F.)
	oFWLayer:AddCollumn( 'ALLUP', 100, .T., 'UP')
	oPnlCapa := oFWLayer:GetColPanel ('ALLUP', 'UP')

	If ! ::CreateBrowse(oPnlCapa, ::aForm[1][2], ::aForm[1][3], ::aForm[1][1], "", "", ::aForm[1][P_FIELD_MARK])
		Return .F.
	EndIF

	oCQuery := aQuery[1][2]
	oBrowse := aQuery[1][4]

	oBrowse:SetProfileID(::__ROTINA + ::aForm[1][1])
	oBrowse:ForceQuitButton()

	If Len(::aFolder) > 0
		// Define painel Detail
		oFWLayer:AddLine( 'DOWN', 55, .F.)
		oPnlDetail := oFWLayer:GetLinePanel ('DOWN')

		oFolder := TFolder():New( 0, 0, ::aFolder, ::aFolder, oPnlDetail,,,, .T.,,oPnlDetail:NCLIENTWIDTH/2,(oPnlDetail:NCLIENTHEIGHT/2))

		For nPos := 2 To Len(::aForm)
			If ! ::CreateBrowse(	oFolder:aDialogs[nPos - 1], ::aForm[nPos][2], ::aForm[nPos][3],;
									::aForm[nPos][1], ::aJoin[nPos - 1], "", ::aForm[nPos][P_FIELD_MARK])
				Return .F.
			EndIf

			aQuery[nPos][4]:SetProfileID(::__ROTINA + AllTrim(Str(nPos)))
		Next
	EndIf

	For nPos := 1 To Len(aQuery)
		aQuery[nPos][4]:Activate()
		If aQuery[nPos][4]:cClassName = "FWBROWSE" .And. aQuery[nPos][4]:oPanelBrowse <> Nil
			aQuery[nPos][4]:oPanelBrowse:Align := CONTROL_ALIGN_ALLCLIENT
		EndIf

		If nPos > 1 .And. ! Empty(aQuery[nPos][5])
			oRelation := FWBrwRelation():New()
			oRelation:AddRelation( oBrowse, aQuery[nPos][4], aQuery[nPos][5] )
			oRelation:Activate()
		EndIf
	Next

	aQuery[1][4]:oBrowse:SetFocus()

	Activate MsDialog oDlg

Return

/*/{Protheus.doc} MontaForm
Montagem de menu padrão para manutenção da consulta
@author Wagner Mobile Costa
@since 21/04/2025
@version 1.00

@type function
/*/

Method CreateBrowse(oOwner, aSX3, aIndTrb, cAlias, cJoin, cFilter, cFieldMark) Class TCForm

Local oQuery
Local nPos 		:= 1, oBrowse
Local aColsIni 	:= {}
Local aSeek		:= {}
Local aIndex	:= {}
Local aRotina 	:= {}
Local lMark   	:= .F.
Local cTitVisua := ""

oQuery := TCQuery():New("", cAlias, aSX3, aIndTrb)
oCQuery := oQuery
cAlias := oQuery:Alias()
If ! oQuery:Activate()
	Return .F.
EndIf

If ! Empty(cFieldMark)
	oBrowse := FWMarkBrowse():New()
	oBrowse:SetFieldMark( cFieldMark )
	oBrowse:SetAllMark( {|| MarkAll(oBrowse)} )
	cMarca := GetMark()
	lMark  := .T.
Else
	oBrowse := FWMBrowse():New()
EndIf

oBrowse:SetOwner(oOwner)
oBrowse:SetAlias(oQuery:Alias())

If ::bLegendDef <> Nil
	Eval(::bLegendDef, cAlias, oBrowse)
EndIf

If .f. // Len(oQuery:aSX3) > 0 -- Não utitilizar a definição do aSX3 Provisioriamente
	For nPos := 1 To Len(oQuery:aSX3)
		If oQuery:aSX3[nPos][10] == "N"
			Loop
		EndIf
		//Filial do Sistema
		AAdd(aColsIni,FWBrwColumn():New())
		nLinha := Len(aColsIni)
		If ! Empty(oQuery:aSX3[nPos][13])
			aColsIni[nLinha]:SetData(&(	"{|| " + AllTrim(oQuery:aSX3[nPos][13]) + " }"))
		Else
			aColsIni[nLinha]:SetData(&(	"{|| " + oQuery:Alias() + "->" + AllTrim(oQuery:aSX3[nPos][1]) + " }"))
		EndIf
		aColsIni[nLinha]:SetTitle(oQuery:aSX3[nPos][6])
		aColsIni[nLinha]:SetSize(oQuery:aSX3[nPos][3])
		aColsIni[nLinha]:SetDecimal(oQuery:aSX3[nPos][4])
		If ! Empty(oQuery:aSX3[nPos][8])
			aColsIni[nLinha]:SetOptions(Separa(oQuery:aSX3[nPos][8], ";"))
		EndIf
		If oQuery:aSX3[nPos][7] == "@BMP"
			aColsIni[nLinha]:SetImage(.T.)
		Else
			aColsIni[nLinha]:SetPicture(oQuery:aSX3[nPos][7])
		EndIf
	Next
	
	For nPos := 1 To Len(oQuery:aIndTrb)
		Aadd( aSeek, { AllTrim(oQuery:aIndTrb[nPos][3]), RetFldIdx(AllTrim(oQuery:aIndTrb[nPos][2])), 1 } )
		Aadd( aIndex, AllTrim(oQuery:aIndTrb[nPos][2]) )
	Next
	
	oBrowse:SetColumns(aColsIni)
	If ! lMark
		oBrowse:SetQueryIndex(aIndex)
	EndIf
  	oBrowse:SetSeek(,aSeek)
EndIf
oBrowse:SetProfileID(::__ROTINA + cAlias)
oBrowse:SetMenuDef(::__ROTINA + cAlias)

cTitVisua := ::cTitulo
If ! Empty(oOwner:cCaption)
	cTitVisua += "-" + oOwner:cCaption
EndIF
cTitVisua := Capital(cTitVisua)

ADD OPTION aRotina TITLE 'Pesquisa'   	ACTION 'PesqBrw' 		OPERATION 1 ACCESS 0
ADD OPTION aRotina TITLE 'Visualizar' 	ACTION "custom.query.U_AxVisual('" + cTitVisua + "', '" + cAlias + "', " + cAlias + "->(Recno()), 2)" 	OPERATION 2 ACCESS 0

If ::bMenuDef <> Nil
	Eval(::bMenuDef, cAlias, oBrowse)
EndIf

Aadd(aRotina, { "Atualizar", "aQuery[" + AllTrim(Str(Len(aQuery) + 1)) + "][2]:TelaParms(.T., aQuery, " + AllTrim(Str(Len(aQuery) + 1)) + ")", 0, 3 } )

For nPos := 1 To Len(aRotina)
	oBrowse:AddButton(aRotina[nPos][1],aRotina[nPos][2],, aRotina[nPos][4], aRotina[nPos][3],, aRotina[nPos][4] )
Next

Aadd(aQuery, { "", oQuery, AClone(aRotina), oBrowse, custom.query.U_RetJoin(cJoin) })

oBrowse:DisableDetails()

Return .T.

User Function AxVisual(cTitulo, cAlias, nRecno, nOpcao)

	cCadastro := cTitulo
	AxVisual(cAlias, nRecno, nOpcao)

Return

/*/{Protheus.doc} setAllMark

  Função para controle de marcação de todos os registros  
    @type Function
    @author Wagner Mobile Costa
    @since 14/05/2025
    @version 1.0
/*/
Static Function MarkAll(oBrowse)

MsgRun( "Aguarde... Marcando Registros", "Marcar Todos", {|| EMarkAll(oBrowse) } )

Return

Static Function EMarkAll(oBrowse)

Local nCurrRec := oBrowse:At()
Local aArea    := GetArea()
Local cAlias   := oBrowse:Alias()

oBrowse:GoTop(.T.)
DbSelectArea(cAlias)
DbGoTop()

While ! (cAlias)->(Eof())
	oBrowse:MarkRec()

	DbSkip()
EndDo

oBrowse:GoTo( nCurrRec, .T. )
RestArea(aArea)

Return

/*/{Protheus.doc} RetFldIdx
Retorna a lista de campos que compoem um indice
@author Wagner Mobile Costa
@since 21/04/2025
@version 1.00

@type function
/*/

Static Function RetFldIdx(cIndice)

Local aIdx := {}, aArea := SX3->(GetArea())
Local aX3Stru := {}
Local cCpo := ""

cIndice := AllTrim(cIndice)
If Right(cIndice, 1) <> "+"
	cIndice += "+"
EndIf

SX3->(DbSetOrder(2))

While At("+", cIndice) > 0
	SX3->(DbSeek( Left(AllTrim(Left(cIndice, At("+", cIndice) - 1)) + Space(Len(FieldGet(FieldPos("X3_CAMPO")))), Len(FieldGet(FieldPos("X3_CAMPO"))))  ))
	cCpo:= Left(AllTrim(Left(cIndice, At("+", cIndice) - 1)) + Space(Len(    SX3->(FieldGet(FieldPos("X3_CAMPO")))    )), Len(  SX3->(FieldGet(FieldPos("X3_CAMPO")))   ))

	aX3Stru:= FWSX3Util():GetFieldStruct(cCpo)
	If Len(aX3Stru) > 0 
		Aadd(aIdx, {"", aX3Stru[2], aX3Stru[3], aX3Stru[4], FWX3Titulo(aX3Stru[1]),,})
	Endif 
	cIndice := Subs(cIndice, At("+", cIndice) + 1, Len(cIndice))
EndDo

SX3->(RestArea(aArea))

Return aIdx

User Function RetJoin(cJOIN)

Return RetJoin(cJoin) 

/*/{Protheus.doc} MenuDef
Retorna a instrução para o relacionamento entre os formulários
@type function
@author Mobile
@since 25/04/2025
/*/

Static Function RetJoin(cJOIN)

Local aJoin := {}
Local cFieldFK := ""
Local cFieldPK := ""

cJoin := AllTrim(cJoin)
If Right(cJoin, 1) <> ";" .And. ! Empty(cJoin)
	cJoin += ";"
EndIf

While At(";", cJoin) > 0
	cFieldFK := Left(Left(cJoin, At(";", cJoin) - 1), At("=", cJoin) - 1)
	cFieldPK := Subs(Left(cJoin, At(";", cJoin) - 1), At("=", cJoin) + 1)
	Aadd(aJoin, { cFieldFK, cFieldPK, "==" })  
	
	cJoin := Subs(cJoin, At(";", cJoin) + 1, Len(cJoin))
EndDo

Return aJoin

Static cSIXTMP := Nil
Static cSX2TMP := Nil
Static cSX3TMP := Nil
Static __SX2   := "_AA"
Static __TMP   := {}

CLASS TCQuery
	Data cID
	Data lJob
	Data cAlias
	Data cPQ1_SX2
	Data cPQ1_SQL
	Data cPQ1_MARK
	Data cPQ1_GSQL
	Data cPQ1_FILTER
	Data cPQ1_FORM
	Data cPQ1_OPTIO
	Data cPQ1_VIEW
	Data nPQ1_WIDTH
	Data cPQ1_KEYMD2
	Data cPQ1_AUTOIN
	Data cPQ1_IDPar
	Data cArqTRB
	Data aIndTrb
	Data lSX3
	Data aSX3
	Data aIniPar
	Data cQuery
	Data cQueryD
	Data cProcD
	Data cProcDic
	Data oOwner
	Data lOpt
	Data cCadastro
	           
	public Method New(cId, cAlias, aSX3, aIndTrb) CONSTRUCTOR
	public Method Activate()
	public Method CpySXS()
	public Method OpenAlias()
	public Method ExcluiTrb()
	public Method TelaParms()
	public Method RunTrb()
	public Method InsTrb()
	public Method Refresh()
	public Method xAnalise()
	public Method Destroy()
	public Method Alias()
ENDCLASS

Method New(cId, cAlias, aSX3, aIndTrb, cPQ1_SQL) CLASS TCQuery

Local cChaveID := xFilial("PQ1") + cId, cTpCPO := ""
Local cUsado   := Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(128) + Chr(160)
Local nPos     := 0

// Atribuição vinda direta para o componente
If Empty(cId)
	Self:cId  := ""
	Self:aSX3 := AClone(aSX3)
	Self:aIndTrb := AClone(aIndTrb)
	Self:cAlias  := cAlias
	Self:cPQ1_SQL := cPQ1_SQL 
	Self:lJob := .F.

	Return
EndIf


Self:cId  := cId
Self:aSX3 := {}
Self:lJob := .F.

DbSelectArea("PQ1")
DbSetOrder(1)
DbSeek(cChaveID)

Self:lOpt        := .T. // PQ1->PQ1_OPT == "1"
Self:cCadastro   := Capital(AllTrim(PQ1->PQ1_NOME))
Self:cPQ1_SX2    := PQ1->PQ1_SX2
Self:cPQ1_SQL    := PQ1->PQ1_SQL
Self:cPQ1_MARK   := PQ1->PQ1_MARK
Self:cPQ1_GSQL   := PQ1->PQ1_GSQL
Self:cPQ1_FILTER := AllTrim(PQ1->PQ1_FILTER)
Self:cPQ1_FORM   := AllTrim(PQ1->PQ1_FORM)
Self:cPQ1_OPTIO  := PQ1->PQ1_OPTIO
Self:cPQ1_VIEW   := PQ1->PQ1_VIEW
Self:nPQ1_WIDTH  := PQ1->PQ1_WIDTH
Self:cPQ1_KEYMD2 := AllTrim(PQ1->PQ1_KEYMD2)
Self:cPQ1_AUTOIN := AllTrim(PQ1->PQ1_AUTOIN)

DbSelectArea("PQ2")
DbSetOrder(1)
DbSeek(cChaveID)

if !Found() .And. ! Empty(PQ1->PQ1_SQL)
	Alert("Campos não configurados para consulta [" + cId + "] !")
	Break
endif

if Empty(PQ1->PQ1_SQL) .And. Empty(PQ1->PQ1_SX2)
	Alert("Consulta [" + Self:cId + "] sem definição SQL ou tabela base !")
	Break
endif

SX3->(dbSetOrder(2))

While !PQ2->(EOF()) .AND. PQ2->(PQ2_FILIAL+PQ2_ID) == cChaveID
	if PQ2->PQ2_SX3 == "S"
		if SX3->(MsSeek(Alltrim(PQ2->PQ2_NOME)))
			Aadd(Self:aSX3, { 	GetSx3Cache(Alltrim(PQ2->PQ2_NOME),"X3_CAMPO"),;
							GetSx3Cache(Alltrim(PQ2->PQ2_NOME),"X3_TIPO"),;
							GetSx3Cache(Alltrim(PQ2->PQ2_NOME),"X3_TAMANHO"),;
							GetSx3Cache(Alltrim(PQ2->PQ2_NOME),"X3_DECIMAL"),;
							PQ2->PQ2_ORDEM,;
							Alltrim(GetSx3Cache(Alltrim(PQ2->PQ2_NOME),"X3_TITULO")),;
							Alltrim(GetSx3Cache(Alltrim(PQ2->PQ2_NOME),"X3_PICTURE")),;
							GetSx3Cache(Alltrim(PQ2->PQ2_NOME),"X3_CBOX"),;
							Val(PQ2->PQ2_NIVEL),;
							If(PQ2->PQ2_BROWSE == "2", "N", "S"),;
							cUsado,;
							GetSx3Cache(Alltrim(PQ2->PQ2_NOME),"X3_F3"),;
							GetSx3Cache(Alltrim(PQ2->PQ2_NOME),"X3_INIBRW") } )
		else
			MsgInfo("Campo '"+Alltrim(PQ2->PQ2_NOME)+"' não encontrado no dicionário de dados!")
			break
		endif
		PQ2->(DBSKIP())
		Loop
	endif
	
	Do Case
		case PQ2->PQ2_TIPO == "1"
			cTpCPO := "C"
		case PQ2->PQ2_TIPO == "2"
			cTpCPO := "N"
		case PQ2->PQ2_TIPO == "3"
			cTpCPO := "L"
		case PQ2->PQ2_TIPO == "4"
			cTpCPO := "D"
		case PQ2->PQ2_TIPO == "5"
			cTpCPO := "M"
	End Case
	
	Aadd(Self:aSX3, { 	PQ2->PQ2_NOME,;
					cTpCPO,;
					PQ2->PQ2_TAM,;
					PQ2->PQ2_TAMDEC,;         
					PQ2->PQ2_ORDEM,;
					Alltrim(PQ2->PQ2_TITULO),;
					Alltrim(PQ2->PQ2_PIC),;
					PQ2->PQ2_EXPRESS,;
					Val(PQ2->PQ2_NIVEL),;
					If(PQ2->PQ2_BROWSE == "2", "N", "S"),;
					cUsado,;
					PQ2->PQ2_F3,;
					PQ2->PQ2_RELACA } )

	PQ2->(DBSKIP())
End
SX3->(dbSetOrder(1))

Self:lSX3 := .F.
If .F. // (! Empty(PQ1->PQ1_SQL) .Or. Len(Self:aSX3) > 0) .And. Left(Self:cPQ1_SX2, 2) <> "SX"
	If (nPos := Ascan(__TMP, { |x| x[1] == cId })) == 0
		Self:cAlias := "_" + Soma1(Right(__SX2, 2))
		__SX2 := Self:cAlias 
		
		Aadd(__TMP, { cId, __SX2 })
	Else
		Self:cAlias := __TMP[nPos][2]
	EndIf
Else
	Self:cAlias := If(! Empty(PQ1->PQ1_SX2), AllTrim(PQ1->PQ1_SX2), AllTrim(PQ1->PQ1_ID) + "QRY")
EndIf
	
Self:aIndTrb := {}

PQ3->(DbSeek(xFilial("PQ3")+cId))
While !PQ3->(EOF()) .AND. PQ3->(PQ3_FILIAL+PQ3_ID) == cChaveID
	Aadd(Self:aIndTrb,{ PQ3->PQ3_ORDEM, Alltrim(PQ3->PQ3_CHAVE), Capital(PQ3->PQ3_DESCR),;
						CriaTrab(Nil,.F.) + PQ3->PQ3_ORDEM, PQ3->PQ3_INVERT})

	PQ3->(DBSKIP())
End

If ! Empty(PQ1->PQ1_SX2) .And. Len(Self:aIndTrb) == 0
	SIX->(DbSetOrder(1))
	SIX->(DbSeek(PQ1->PQ1_SX2))
	While SIX->(FieldGet(FieldPos("INDICE"))) == PQ1->PQ1_SX2 .And. ! SIX->(Eof())
		Aadd(Self:aIndTrb,{ SIX->(FieldGet(FieldPos("ORDEM"))), Alltrim(SIX->(FieldGet(FieldPos("CHAVE")))), Capital(SIX->(FieldGet(FieldPos("DESCRICAO")))), CriaTrab(Nil,.F.) + SIX->(FieldGet(FieldPos("ORDEM"))), "N"})
  		SIX->(DbSkip())
	EndDo
EndIf

Return

Method OpenAlias() CLASS TCQuery
/*/f/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
<Descricao> : Abertura do alias de apresentação do grid
<Data> : 24/03/2014
<Parametros> : 
<Retorno> : 
<Processo> : Consultas Personalizadas
<Tipo> (Menu,Trigger,Validacao,Ponto de Entrada,Genericas,Especificas ) : E
<Obs> :
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
*/

Local nPos := 0, aStruct := {}
Local nI   := 0

If ! Empty(Self:cPQ1_SQL)
	Self:cArqTRB := CriaTrab(aStruct,.F.)

	If .F. // Self:cPQ1_GSQL == "1"
		// lCpy := .T.
	Else
		For nPos := 1 To Len(Self:aSX3)
			Aadd(aStruct, { Self:aSX3[nPos][1], Self:aSX3[nPos][2], Self:aSX3[nPos][3], Self:aSX3[nPos][4] })
		Next
	
		If .T. //-- Top Connect
			MsErase(Self:cArqTRB)
			MsCreate(Self:cArqTRB, aStruct, 'TOPCONN' )
			dbUseArea( .T., 'TOPCONN', Self:cArqTRB, Self:cAlias, .T., .F. )
			For nPos := 1 To Len(Self:aSX3)
				If Self:aSX3[nPos][2] <> "C"
					TCSetField(Self:cAlias, Self:aSX3[nPos][1], Self:aSX3[nPos][2], Self:aSX3[nPos][3], Self:aSX3[nPos][4])
				Endif
			Next
			
			For nI := 1 To Len(Self:aIndTrb)
				INDEX ON &(Self:aIndTrb[nI][2]) TO &(Self:aIndTrb[nI][4])
			Next
			
			If Len(Self:aIndTrb) == 1
				SET Index To 	(Self:aIndTrb[1][4])	
			ElseIf Len(Self:aIndTrb) == 2
				SET Index To 	(Self:aIndTrb[1][4]), (Self:aIndTrb[2][4])
			ElseIf Len(Self:aIndTrb) == 3
				SET Index To 	(Self:aIndTrb[1][4]), (Self:aIndTrb[2][4]), (Self:aIndTrb[3][4])
			ElseIf Len(Self:aIndTrb) == 4
				SET Index To 	(Self:aIndTrb[1][4]), (Self:aIndTrb[2][4]), (Self:aIndTrb[3][4]), (Self:aIndTrb[4][4])
			ElseIf Len(Self:aIndTrb) == 5
				SET Index To 	(Self:aIndTrb[1][4]), (Self:aIndTrb[2][4]), (Self:aIndTrb[3][4]), (Self:aIndTrb[4][4]), (Self:aIndTrb[5][4])
			ElseIf Len(Self:aIndTrb) == 6
				SET Index To 	(Self:aIndTrb[1][4]), (Self:aIndTrb[2][4]), (Self:aIndTrb[3][4]), (Self:aIndTrb[4][1]), (Self:aIndTrb[5][4]),;
								(Self:aIndTrb[6][4])
			ElseIf Len(Self:aIndTrb) == 7
				SET Index To 	(Self:aIndTrb[1][4]), (Self:aIndTrb[2][4]), (Self:aIndTrb[3][4]), (Self:aIndTrb[4][4]), (Self:aIndTrb[5][4]),; 
								(Self:aIndTrb[6][4]), (Self:aIndTrb[7][4])
			ElseIf Len(Self:aIndTrb) == 8
				SET Index To 	(Self:aIndTrb[1][4]), (Self:aIndTrb[2][4]), (Self:aIndTrb[3][4]), (Self:aIndTrb[4][4]), (Self:aIndTrb[5][4]),; 
								(Self:aIndTrb[6][4]), (Self:aIndTrb[7][4]), (Self:aIndTrb[8][4])
			ElseIf Len(Self:aIndTrb) == 9
				SET Index To 	(Self:aIndTrb[1][4]), (Self:aIndTrb[2][4]), (Self:aIndTrb[3][4]), (Self:aIndTrb[4][4]), (Self:aIndTrb[5][4]),; 
								(Self:aIndTrb[6][4]), (Self:aIndTrb[7][4]), (Self:aIndTrb[8][4]), (Self:aIndTrb[9][4])
			ElseIf Len(Self:aIndTrb) == 10
				SET Index To 	(Self:aIndTrb[1][4]), (Self:aIndTrb[2][4]), (Self:aIndTrb[3][4]), (Self:aIndTrb[4][4]), (Self:aIndTrb[5][4]),; 
								(Self:aIndTrb[6][4]), (Self:aIndTrb[7][4]), (Self:aIndTrb[8][4]), (Self:aIndTrb[9][4]), (Self:aIndTrb[10][4])
			EndIf
		EndIf
		
		DbSetOrder(1) 
	EndIf
EndIf

DbSelectArea(Self:cAlias)

Return

Method Activate() CLASS TCQuery

if ! Self:TelaParms(.T.)
	Self:Destroy()
	Return .F.
endif

Return .T.

Method Destroy() CLASS TCQuery

Self:ExcluiTrb()

Return

Method ExcluiTrb() CLASS TCQuery

Local nTrb := 1
If Select(Self:cAlias) > 0
	DbSelectArea(Self:cAlias)
	DbCloseArea()
EndIf

If ! Empty(Self:cQuery) .And. ValType(Self:cArqTrb) = "C"
	MsErase(Self:cArqTRB)
EndIf

For nTrb := 1 To Len(Self:aIndTrb)
	MsErase(Self:aIndTrb[nTrb][4])
	Self:aIndTrb[nTrb][4] := CriaTrab(Nil,.F.) + Self:aIndTrb[nTrb][1]
Next
 
Return .T.

//Tela de Parametros
Method TelaParms(lTela, _aQuery, nQuery) CLASS TCQuery

Local nP, n1, n2, nIt, nOpca := nExec := 0
Local oDlgP, oScrollP, oMemoP, oSayP, oGetP, cTituloP
Local cPictP, oColorP, nLinha1P, nLiina2P
Local cKeyADVPL 	:= cKeySQL := cContdIni := "", cFilPQ4 := xFilial("PQ4"), cMemo := Space(10)
Local aParams   	:= {}, aNewGets 	:= {}
Local nOrdem    	:= 1, cTagSQL 	:= cParam := ""
Local nPos			:= 0
Local cIDParam      := ""
Local lGrv			:= .T.
Local xVar			:= ""

If ! AliasInDic("PQ1")
	MsAguarde({|| Self:RunTrb() },"Consulta Personalizada","Executando Consulta, Aguarde ...",.T.)

	If _aQuery <> Nil .And. ! Empty(Self:cPQ1_FILTER)
		_aQuery[nQuery][4]:CleanFilter()
		_aQuery[nQuery][4]:AddFilter("FILTRO",	cFilter := &(Self:cPQ1_FILTER),.T.,.T.,Self:cPQ1_SX2)
		_aQuery[nQuery][4]:SetFilterDefault(cFilter)
	EndIf

	If nQuery == 1
		For nPos := 2 To Len(_aQuery)
			_aQuery[nPos][2]:Refresh(.F., _aQuery, nPos)
		Next
	EndIf

	Return .T.
EndIf

DbSelectArea("PQ1")
DbSetOrder(1)
DbSeek(xFilial("PQ1")+Self:cId)

Self:cQuery := Self:cQueryD  := PQ1->PQ1_SQL
Self:cProcD := Self:cProcDic := PQ1->PQ1_PROCED

cIDParam := If(! Empty(Self:cPQ1_IDPar), Self:cPQ1_IDPar, Self:cId)
If ! Empty(Self:cPQ1_IDPar) .And. Len(aQuery) > 1
	lTela := .F.
	lGrv  := .F.
EndIf

DbSelectArea("PQ4")
DbSetorder(1)
DbSeek(xFilial() + cIDParam, .T.)
cMemo := PQ4_HELP

PQ5->(DBSETORDER(1))
cChavPQ5 := xFilial("PQ5")+ cIDParam + __cUserID

While !PQ4->(EOF()) .AND. PQ4->(PQ4_FILIAL+PQ4_ID) == cFilPQ4+cIDParam
	
	//Parametro por usuario
	if ! Self:lJob .And. PQ5->(DBSEEK(cChavPQ5+PQ4->PQ4_NOME))
		cContdIni := PQ5->PQ5_INI
	else
		cContdIni := PQ4->PQ4_INI
	endif
	
	Aadd(aNewGets,{nil,;  						 //01
	PQ4_ORDEM,;        							 //02
	PQ4_NOME,;         							 //03
	PQ4_TITULO,;       							 //04
	PQ4_TIPO,;         							 //05
 	    IIF(PQ4->PQ4_TIPO=="5",8000,PQ4->PQ4_TAM),; //06
	PQ4_TAMDEC,;       							 //07
	cContdIni,;        							 //08
	PQ4_F3,;           							 //09
	PQ4_LISTA,;        							 //10
	PQ4_OBRIG,;        							 //11
	PQ4_PIC,;          							 //12
	PQ4_HELP,;         							 //13
	PQ4_VALID})		 							 //14
	PQ4->(DBSkip())
end

If Self:aIniPar == Nil
	Self:aIniPar := {}
EndIf

if Len(Self:aIniPar) > 0
	For nP := 1 to Len(Self:aIniPar)
		aNewGets[nP,8] := Self:aIniPar[nP]
	Next nP
endif

For n1 := 1 to Len(aNewGets)
	_cCampo  := "_" + aNewGets[n1,3]

	if Empty(aNewGets[n1,8])
		Do Case
			Case aNewGets[n1,5]=="1"
				_cIniCpo := Space( aNewGets[n1,6] )
				cPictP := "@!"
			Case aNewGets[n1,5]=="2"
				_cIniCpo := 0
				cPictP := "@E 999,999,999.99"
			Case aNewGets[n1,5]=="3"
				_cIniCpo := .F.
				cPictP := ""
			Case aNewGets[n1,5]=="4"
				_cIniCpo := CTOD("  /  /  ")
				cPictP := "@D"
			Case aNewGets[n1,5]=="5"
				_cIniCpo := Space(8000)
				cPictP := ""
		Endcase
	else
		_cIniCpo := Eval(&("{|| "+aNewGets[n1,8]+"}"))
	endif

	&_cCampo := _cIniCpo
Next n1

if ! Self:lJob .And. lTela .And. Len(aNewGets) > 0
	DEFINE FONT oFont NAME "Arial" SIZE 0, -11 bold

	DEFINE MSDIALOG oDlgP TITLE "Parâmetros: " + Capital(AllTrim(PQ1->PQ1_NOME)) From 0,0 To 340,500 of oDlgP PIXEL
	nLinha1P := (oDlgP:nHeight-118)/2
	nLiina2P := 7
	nColun1 := (oDlgP:nWidth-14)/2
	oScrollP := TScrollBox():New( oDlgP, 002,002,nLinha1P,ncolun1)
	lExecuta := .F.

	For n1 := 1 to Len(aNewGets)
		aItens := {}
		nTam := (aNewGets[n1,6]+aNewGets[n1,7])*4

		if nTam < 40
			nTam := 40
		endif

		cTituloP := "{|| OemToAnsi('"+aNewGets[n1,4]+"')}"
		oColorP := iif(aNewGets[n1,11] == "S",CLR_HBLUE,CLR_BLACK)
		oSayP :=  TSay():New( nLiina2P, 15,        &cTituloP,oScrollP, ,oFont, , , , .T.,oColorP          , , , , , , )
		cTituloP := oSayP:cCaption

		_cCampo  := "_"+Alltrim(aNewGets[n1,3])
		cValidP := aNewGets[n1,14]

		if !Empty(cValidP)
			For n2 := 1 to Len(aNewGets)
				_cCampo1 := Alltrim(aNewGets[n2,3])
				cValidP := StrTran(cValidP,"M->"+_cCampo1,"_"+_cCampo1)
			Next n2
		endif

		if aNewGets[n1,11] == "S"
			cBlKVld := "{|| NaoVazio("+_cCampo+")"+IIF(!Empty(cValidP)," .AND. "+alltrim(cValidP),"")+"}"
		else
			cBlKVld := "{|| "+IIF(!Empty(cValidP),alltrim(cValidP),".T.")+"}"
		endif

		cF3 := iif(Empty(aNewGets[n1,09]),nil,aNewGets[n1,09])
		cPictP:= iif(Empty(aNewGets[n1,12]),cPictP,aNewGets[n1,12])
		cHelpCpo := "{|| cMemo:='"+Alltrim(StrTran(aNewGets[n1,13],chr(13)+chr(10)," "))+"',oMemoP:Refresh()}"
		cBlkGet := "{|u| If( PCount() == 0, "+_cCampo+","+_cCampo+":= u ) }"

		if Empty(cF3) .and. !Empty(aNewGets[n1,10])
			cItens := aNewGets[n1,10]
			cItens := StrTran(cItens,";","','")
			cItens := "'"+Alltrim(cItens)+"'"
			aItens := &("{"+cItens+"}")
			nTam := 0
			For nIt := 1 to Len(aItens)
				if nTam < Len(aItens[nIt])
					nTam := Len(aItens[nIt])
				endif
			Next
			nTam := (nTam * 4) + 4
		endif

		if Len(aItens) == 0 .and. aNewGets[n1,5] # "3"
			oGetP := TGet():New( nLiina2P, 100  ,&cBlKGet,oScrollP,nTam,8  ,cPictP, &(cBlkVld),,,, .F.,, .T.,, .F.,,.F., .F.,, .F., .F.,cF3,(_cCampo),,,,.T.)
		elseif Len(aItens) > 0 .and. aNewGets[n1,5] # "3"
			oGetP := TComboBox():New(nLiina2P,100, &cBlKGet,aItens,nTam,10,oScrollP,,,&(cBlkVld),,,.T.)
		elseif aNewGets[n1,5] == "3"
			oGetP := TCheckBox():New (nLiina2P,100,"", &cBlKGet, oScrollP, 10, 10,,,,, CLR_BLUE,,,.T.)
		endif

		oGetP:bGotFocus := &cHelpCpo
		nLiina2P += 15
	Next n1

	nLinha1P+= 4
	@ nLinha1P,002 GET oMemoP VAR cMemo MEMO SIZE 170, 39 READONLY PIXEL OF oDlgP
	nLinha1P+= 27
	DEFINE SBUTTON FROM nLinha1P,185 TYPE 1  ACTION (nOpca := 1,oDlgP:End()) ENABLE PIXEL OF oDlgP
	DEFINE SBUTTON FROM nLinha1P,220 TYPE 2  ACTION (oDlgP:End()) ENABLE PIXEL OF oDlgP
	ACTIVATE MSDIALOG oDlgP CENTERED

	Self:aIniPar := {}
	For nP := 1 to Len(aNewGets)
		Aadd(Self:aIniPar, aNewGets[nP,8])
	Next nP
else
	nOpca := 1
endif

if nOpca == 1
	Self:Destroy()
	//Gravacao do parametros por usuario
	If lGrv .And. ! Self:lJob
		For n1 := 1 to Len(aNewGets)
			if !PQ5->(DBSEEK(cChavPQ5+aNewGets[n1,3]))
				RECLOCK("PQ5",.T.)
				PQ5->PQ5_ID := cIDParam
				PQ5->PQ5_USERID := __cUserID
				PQ5->PQ5_NMPAR := aNewGets[n1,3]
			else
				RECLOCK("PQ5",.F.)
			endif
	
			if aNewGets[n1,5] == "1"
				PQ5->PQ5_INI := "'"+StrTran(Substr(&("_"+aNewGets[n1,3]),1,aNewGets[n1,6]),"'","")+"'"
			elseif aNewGets[n1,5] == "2"
				PQ5->PQ5_INI := Alltrim( Str(&("_"+aNewGets[n1,3]),aNewGets[n1,6],aNewGets[n1,7]) )
			elseif aNewGets[n1,5] == "3"
				PQ5->PQ5_INI := if(&("_"+aNewGets[n1,3]),".T.",".F.")
			elseif aNewGets[n1,5] == "4"
				PQ5->PQ5_INI := "CTOD('"+DtoC(&("_"+aNewGets[n1,3]))+"')"
			endif
			Self:aIniPar[n1] := PQ5->PQ5_INI
			aNewGets[n1,8] := PQ5->PQ5_INI
	
			PQ5->(MSUNLOCK())
		Next
	EndIf
	
	//MacroSubstituicao Query
	n1    := 0
	n2    := 0
	nExec := 0
	cLinha := ""

	//MacroSubstituicao Procedure
	n1     := 0
	n2     := 0
	nExec  := 0
	cLinha := ""

	Self:cProcD := Self:cProcDic
	Do While .T.
		n1 := At("<ADVPL>",SubString(Self:cProcD,1,Len(Self:cProcD)))
		if n1 == 0
			Exit
		endif

		n2 := At("</ADVPL>",SubString(Self:cProcD,n1,Len(Self:cProcD)))
		if n2 == 0 .and. n1 > 0
			Alert("Pre-SQL [" + Self:cProcD + "] Estrutura sem a tag </ADVPL>!")
			break
		endif

		cLinha := SubString(Self:cProcD,n1+7,n2-8)
		cParam := cLinha

		_xSQL(@cLinha)

		if ValType(cLinha) == "C"
			Self:cProcD := SubString(Self:cProcD,1,n1-1)+cLinha+SubString(Self:cProcD,n2+7+n1,Len(Self:cProcD))
			nExec ++
		ElseIf nExec > 1
			Alert("Atenção. O parametro [" + cParam + "] não está sendo substituido na Pre-SQL [" + Self:cProcD + "] ")
			Break
		endif
	EndDo

	Self:cQuery := Self:cQueryD
	For n1 := 1 to Len(aNewGets)
		cKeyADVPL := "#"+Alltrim(aNewGets[n1,3])+"#"
		cTagSQL   := "@"+Alltrim(aNewGets[n1,3])+"@"
		cMvPar    := "mv_par"+Alltrim(Str(n1))

		if aNewGets[n1,5] == "1"
			xVar := Substr(&("_"+aNewGets[n1,3]),1,aNewGets[n1,6])
			cKeySQL := "'"+xVar+"'"
		elseif aNewGets[n1,5] == "2"
			xVar := StrTran( Alltrim( Str(&("_"+aNewGets[n1,3]),aNewGets[n1,6],aNewGets[n1,7]) ) ,",",".")
			cKeySQL := xVar
		elseif aNewGets[n1,5] == "3"
			xVar := aNewGets[n1,3]
			cKeySQL := if(&("_"+aNewGets[n1,3]),"'.T.'","'.F.'")
		elseif aNewGets[n1,5] == "4"
			xVar := Dtos(&("_"+aNewGets[n1,3]))
			cKeySQL := "'"+xVar+"'"
		endif
		
		&("MV_PAR" + StrZero(n1, 2)) := xVar

		Aadd(aParams,cKeySQL)

		Self:cQuery := StrTran(Self:cQuery, cKeyADVPL, cKeySQL)
		Self:cQuery := StrTran(Self:cQuery, cTagSQL, cKeySQL)

		if ! Empty(Self:cProcD)
			Self:cProcD := StrTran(Self:cProcD, cKeyADVPL, cKeySQL)
			Self:cProcD := StrTran(Self:cProcD, cTagSQL, cKeySQL)
		endif
	Next

   If Self:cId == __PQ1_ID
	   __PQ1_PRSQL := Self:cProcD
		Self:cProcD := Self:cProcDic := ""
	EndIf

	Do While .T.
		n1 := At("<ADVPL>",SubString(Self:cQuery,1,Len(Self:cQuery)))
		if n1 == 0
			Exit
		endif
		n2 := At("</ADVPL>",SubString(Self:cQuery,n1,Len(Self:cQuery)))

		if n2 == 0 .and. n1 > 0
			Alert("Query [" + Self:cQuery + "] Estrutura sem a tag </ADVPL>!")
			break
		endif

		cLinha := SubString(Self:cQuery,n1+7,n2-8)
		cParam := cLinha

		_xSQL(@cLinha)

		if ValType(cLinha) == "C"
			Self:cQuery := SubString(Self:cQuery,1,n1-1)+cLinha+SubString(Self:cQuery,n2+7+n1,Len(Self:cQuery))
			nExec ++
		ElseIf nExec > 1
			Alert("Atenção. O parametro [" + cParam + "] não está sendo substituido na instrução [" + Self:cQuery + "] ")

			break
		endif
	EndDo

   	If Self:cId == __PQ1_ID
	   __PQ1_PRSQL := Self:cQuery
	EndIf

	DbSelectArea("PQ1")
	MsAguarde({|| Self:RunTrb() },"Consulta Personalizada","Executando Consulta, Aguarde ...",.T.)
endif

If _aQuery <> Nil .And. ! Empty(Self:cPQ1_FILTER)
	_aQuery[nQuery][4]:CleanFilter()
	_aQuery[nQuery][4]:AddFilter("FILTRO",	cFilter := &(Self:cPQ1_FILTER),.T.,.T.,Self:cPQ1_SX2)
	_aQuery[nQuery][4]:SetFilterDefault(cFilter)
EndIf

If nQuery == 1
	For nPos := 2 To Len(_aQuery)
		_aQuery[nPos][2]:Refresh(.F., _aQuery, nPos)
	Next
EndIf

Return nOpca == 1

Method Refresh(lTela, aQuery, nQuery) CLASS TCQuery

Self:TelaParms(lTela)

If aQuery <> Nil .And. ! Empty(Self:cPQ1_FILTER)
	aQuery[nQuery][4]:CleanFilter()
	aQuery[nQuery][4]:AddFilter("FILTRO",	cFilter := &(Self:cPQ1_FILTER),.T.,.T.,Self:cPQ1_SX2)
	aQuery[nQuery][4]:SetFilterDefault(cFilter)
EndIf

Return

Method RunTrb() CLASS TCQuery

Local aGrupo := UsrRetGrp(), cCodUsr := RetCodUsr()

if (AScan(aGrupo,"000000") > 0 .or. cCodUsr == "000000") .and. ! Empty(Self:cQuery) .And.;
	SuperGetMv("TI_DBGQRY",, .F.)
	if MsgYesNo("Deseja realizar a analise da consulta?")
		if ! Self:xAnalise()
			Return .F.
		endif
	endif
endif

if ! Empty(Self:cProcD)
	If TCSQLEXEC(Self:cProcD) <> 0
		Alert(TcSqlError())
		Return .F.
	EndIf
endif

If Select(Self:cAlias) > 0
	DbSelectArea(Self:cAlias)
	DbCloseArea()
EndIf
Self:OpenAlias()

if !Empty(Self:cQuery)
	MsAguarde({|| Self:InsTrb() },"Consulta Personalizada","Gerando a Consulta, Aguarde ...",.T.)
endif

Return

Method InsTrb() CLASS TCQuery

Local cSQL  := "INSERT INTO " + Self:cArqTrb + "("
Local nSX3  := 0
Local nLoop := 0 
Local nJ    := 0
Local nCountTrb := 0
Local lChvTCQ := GetMv("TI_CHVTCQR",,.T.)

If .T. // ! Self:lOpt
	// MsgInfo("Inicio: " + Time()) @ Tempo Query
	If .T.	// Adotado não aplicar change query se necessário - criar configuração na PQ1
		If lChvTCQ
			TCSQLEXEC("alter session set cursor_sharing=exact")
		EndIf 
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,Self:cQuery),"QRY",.F.,.T.)
	Else
		If lChvTCQ
			TCSQLEXEC("alter session set cursor_sharing=exact")
		EndIf 
		dbUseArea(.T.,"TOPCONN",TcGenQry(,,ChangeQuery(Self:cQuery)),"QRY",.F.,.T.)
	EndIf
	// MsgInfo("Fim: " + Time())
	
	For nJ := 1 To Len(Self:aSX3)
		If Self:aSX3[nJ][2] $ "D,L,N"
			TCSetField("QRY", Self:aSX3[nJ][1], Self:aSX3[nJ][2], Self:aSX3[nJ][3], Self:aSX3[nJ][4])
		EndIf
	Next nI
	
	nTotLn := 0
	If Self:lJob
		ConOut("TCQUERY.PRW - " + Self:cId + " - Contando registros ...")
	Else
		MsProcTxt("Contando registros ...")
	EndIf
	QRY->(DbGoTop())
	QRY->( DbEval({|| nCountTrb++ },,{|| !EOF()}) )
	QRY->(DbGoTop())
	ProcRegua(nCountTrb)
	
	aQryStru := QRY->(DbStruct())
	nCountLn := 0
	
	While ! QRY->(EOF())
		nTotLn++
		If Self:lJob
			ConOut("TCQUERY.PRW - " + Self:cId + " - Registros processados: "+Alltrim(Str(nTotLn,10,0))+"/"+Alltrim(Str(nCountTrb,10,0)))
		Else
			MsProcTxt("Registros processados: "+Alltrim(Str(nTotLn,10,0))+"/"+Alltrim(Str(nCountTrb,10,0)))
		EndIf
		ProcessMessage()

		RecLock(Self:cAlias,.T.)
		
		For nLoop := 1 To Len(aQryStru)
			(Self:cAlias)->&(aQryStru[nLoop,1]) := QRY->&(aQryStru[nLoop,1])
		Next nLoop
		
		(Self:cAlias)->(MsUnlock())
		
		QRY->(DbSkip())
	End
	
	QRY->(DbCloseArea())
Else
	For nSX3 := 1 To Len(Self:aSX3)
		cSQL += AllTrim(Self:aSX3[nSX3][1]) + ","
	Next nI

	cSQL += "R_E_C_N_O_) " + Self:cQuery

	If TCSQLEXEC(cSQL) <> 0
		Alert(TcSqlError())
		Return .F.
	EndIf
	TCRefresh(RetSqlName(Self:cAlias))
EndIf
*/

Return

Static Function _xSQL(cLinha)

Local nX
Local cRet := ""

if Upper(Alltrim(cLinha)) == "<COLUNAS>"
	For nX := 1 to Len(Self:aSX3)
		cRet += ", "+alltrim(Self:aSX3[nX,2])
	Next nX
	cLinha := SubStr(cRet,2,Len(cRet))
else
	cLinha := &(cLinha)
endif

Return

Method xAnalise() CLASS TCQuery

Local oDlgHelp, oBtOk
Local oFont	 :=	TFont ():New ("Arial",, 15,, .F.)
Local oFontB :=	TFont ():New ("Arial",, 15,, .T.)
Local lRet := .F., cAlias := RetSqlName(Self:cAlias)

DEFINE MSDIALOG oDlgHelp FROM 000,000 TO 500, 660 TITLE "Analise da Consulta" PIXEL
@005, 005 SAY "Query" SIZE 205, 010 FONT oFontB OF oDlgHelp PIXEL COLOR CLR_RED
@015, 005 GET Self:cQuery OF oDlgHelp MEMO SIZE 320, 095 FONT oFont PIXEL
@115, 005 SAY "Stored Procedure" SIZE 100, 010 FONT oFontB OF oDlgHelp PIXEL COLOR CLR_RED
@125, 005 GET Self:cProcD OF oDlgHelp MEMO SIZE 320, 095 FONT oFont PIXEL
@220, 005 SAY "Tabela" SIZE 040, 010 FONT oFontB OF oDlgHelp PIXEL COLOR CLR_RED
@230, 005 GET cAlias OF oDlgHelp SIZE 040, 010 FONT oFont PIXEL

DEFINE SBUTTON oBtOk FROM 225, 300 TYPE 1 ACTION (lRet := .T., oDlgHelp:End()) ENABLE OF oDlgHelp
ACTIVATE MSDIALOG oDlgHelp CENTERED

Return .T.

Method Alias() CLASS TCQuery

Return Self:cAlias

User Function ParserAdv(cParser)

Local cLinha := "", n1 := n2 := nExec := 0

Do While .T.
	n1 := At("<ADVPL>",SubString(cParser,1,Len(cParser)))
	if n1 == 0
		Return cParser
	endif
	n2 := At("</ADVPL>",SubString(cParser,n1,Len(cParser)))

	if n2 == 0 .and. n1 > 0
		Alert("Estrutura sem a tag </ADVPL>!")
		Break
	endif

	cLinha := SubString(cParser,n1+7,n2-8)
	cParam := cLinha

	_xSQL(@cLinha)

	if ValType(cLinha) == "C"
		cParser := SubString(cParser,1,n1-1)+cLinha+SubString(cParser,n2+7+n1,Len(cParser))
		nExec ++
	ElseIf nExec > 1
      	Alert("Atenção. O parametro [" + cParam + "] não está sendo substituido na instrução [" + cParser + "] ")

		Break
	endif
EndDo

Return cParser
